var N=Object.defineProperty;var s=(r,e)=>N(r,"name",{value:e,configurable:!0});var $=s((r,e)=>{if(typeof r!="string")throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (String)`)},"checkstr"),E=s((r,e)=>{if(!Array.isArray(r))throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (Array)`)},"checkarr");var R=s((r,e)=>{if(typeof r!="string"&&!(r instanceof RegExp))throw new TypeError(`csv: ${e} of type (${r?.constructor?.name}), expected (String) or (RegExp)`)},"checkstrReg"),w=[",",";","|","	","^"],b=s(r=>new RegExp(`(?:[^${r}
\r]+|(?:${r}(?:${r}${r}|[^${r}])*${r}))+`,"g"),"lineMatcher"),S=s((r,e)=>new RegExp(`(?:[^${r}${e}]+|(?:${e}(?:${e}${e}|[^${e}])*${e}))+`,"g"),"cellMatcher"),y=Symbol("auto"),k=s(r=>{var e=w.map(a=>Math.min(...r.map(t=>t.split(a).length))),[o,d]=e.reduce(([a,t],p,f)=>p>t?[f,p]:[a,t],[0,0]);return w[o]},"detectSeparator"),x=s((r,e,o)=>(r=String(r),r.match(o)?`${e}${r.replaceAll(e,e+e)}${e}`:r),"encodeCell"),M=s((r,e={})=>{var{separator:o,lineEnd:d,quote:a}={separator:",",lineEnd:`\r
`,quote:'"',...e};E(r,"data"),$(o,"separator"),$(d,"lineEnd"),$(a,"quote");var t=new RegExp("["+d+o+a+"]"),p=Array.isArray(r[0])?!1:Object.keys(r[0]),f=p?p.map(h=>x(h,a,t)).join(o)+d:"",g=r.map(h=>(p&&(h=p.map(i=>h[i])),h.map(i=>x(i,a,t)).join(o))).join(d);return f+g},"encode"),T=s((r,e={})=>{var{separator:o,lineEnd:d,quote:a,headers:t,trim:p,cast:f,throwLengthNotEqual:g}={separator:y,lineEnd:"",quote:'"',headers:!0,trim:!1,cast:!0,throwLengthNotEqual:!0,...e};$(r,"data"),o!==y&&$(o,"separator"),R(d,"lineEnd"),$(a,"quote"),t!==!0&&t!==!1&&E(t,"headers"),f!==!0&&f!==!1&&E(f,"cast");var h=d||b(a),i=r.match(h);o===y&&(o=k(i));var A=S(o,a);return i=i.map(u=>u.match(A).map(c=>(p&&(c=c.trim()),c[0]===a&&(c=c.slice(1,-1).replaceAll(a+a,a)),c))),t===!0&&(t=i[0],i=i.slice(1)),i.map((u,c)=>{if(t&&t.length!==u.length&&g)throw new RangeError(`csv: line (${c}) of length (${u.length}), expected (${t.length})`);return Array.isArray(f)?u=u.map((n,m)=>{var v=f[m];if(v==="string")return n;if(v==="number")return Number(n);if(n==="true")return!0;if(n==="false")return!1;if(n!=="undefined"){if(n==="null")return null;if(v==="date")return new Date(n);if(v==="json")return JSON.parse(n);throw new TypeError(`csv: undefined casting type (${v})`)}}):f&&(u=u.map(n=>{if(n==="true")return!0;if(n==="false")return!1;if(n!=="undefined"){if(n==="null")return null;var m=Number(n);return Number.isNaN(m)?n:m}})),t&&(u=u.reduce((n,m,v)=>(n[t[v]]=m,n),{})),u})},"decode"),L={encode:M,decode:T};export{R as checkstrReg,T as decode,L as default,M as encode};
